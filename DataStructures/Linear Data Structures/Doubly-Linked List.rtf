{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue11;\red201\green199\blue8;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c0;\cssrgb\c82582\c80870\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Linked list that contains an extra pointer for each node that points to the previous node\
\
pointer to head node\
pointer to tail node\
node\
	contains a value\
	pointer to next node\
	\cf2 pointer to previous node\cf0 \
methods: next, \cf3 prev\cf0 , insert, remove\
\
The difference between linked list and doubly linked list is the \'93prev\'94 method\
\
\

\fs48 Time Complexity
\fs28 \
- Access 0(n) can cut in half but still linear\
- Search 0(n)\
- Insert 0(1)\
- Remove 0(1)\
\
\
Example of linked list\
- create many other data structures\
	stacks\
	queues\
	graphs\
	hashtables\
- FAT (File Allocation Table) system\
\
\
When should I use a linked list?\
- primarily need it to insert and delete in the middle of your collection\
- splitting and joining are common operations\
- searching and accessing values are not needed\
- no random access needed\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}