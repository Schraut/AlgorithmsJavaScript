{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red201\green199\blue8;}
{\*\expandedcolortbl;;\cssrgb\c82582\c80870\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 A linear data structure that adds and removes elements using a \cf2 last in first out(LIFO)\cf0  rule\
\
like a stack of cds\
\
\

\fs48 Attributes
\fs28 \
- Storage\
	typically linked list or array\
- Methods\
	push - add element to the stack\
	pop - remove and return last element from the stack\
	peek (optional) - returns last element but doesn\'92t remove from stack\
\
\

\fs48 Time Complexity
\fs28 \
Push\
	Constant 0(1)\
Pop\
	Constant 0(1)\
Peek \
	Constant 0(1)\
\
\
Advantages\
- Great for enforcing LIFO restriction\
- Able to dynamically expand and contract\
	with the use of linked list\
\
\
Disadvantages\
- Restricted access to values\
- obsolete in some modern languages (Ruby, Python, Javascript)\
\
\
Example uses of stack\
- undo/redo feature\
- back button on browser\
- evaluate expressions\
	why we used it for balanced parens\
- syntax parsing\
\
\
When should I use a stack?\
- when only the last item in the list is needed\
- when only adding items to the end of your list is needed\
- maintain state and reverse state of something\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}